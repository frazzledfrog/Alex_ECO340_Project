tryCatch({
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE)
return(TRUE)
}, error = function(e) {
message(paste("Failed to install package:", pkg, "Error:", e$message))
return(FALSE)
})
} else {
library(pkg, character.only = TRUE)
return(TRUE)
}
})
if (!packages_loaded["data.table"]) {
stop("Critical package 'data.table' could not be loaded. Aborting.")
}
csv_folder_path <- "C:/Users/Alex/Desktop/ECO340-Project-April-20th-Submission" # USER: MODIFY THIS PATH
tryCatch({
setwd(csv_folder_path)
}, warning = function(w){
stop("Warning setting working directory: ", w$message, ". Check path: ", csv_folder_path)
}, error = function(e) {
stop("Error setting working directory: ", e$message, ". Check path: ", csv_folder_path)
}
)
# Find and load CSV files matching the pattern
all_csv_files <- list.files(path = getwd(), pattern = "\\.csv$", full.names = TRUE, ignore.case = TRUE)
filename_pattern <- "^pub(01|06)\\d{2}\\.csv$"
all_basenames <- basename(all_csv_files)
matching_indices <- grepl(filename_pattern, all_basenames, ignore.case = TRUE)
csv_files <- all_csv_files[matching_indices]
if (length(csv_files) == 0) {
stop("No CSV files matching the pattern '", filename_pattern, "' were found in ", getwd())
} else {
LFS_data <- NULL
for (i in seq_along(csv_files)) {
file_path <- csv_files[i]
current_data <- tryCatch({
data.table::fread(file_path, showProgress = FALSE)
}, error = function(e) {
return(NULL)
})
if (!is.null(current_data) && nrow(current_data) > 0) {
if (is.null(LFS_data)) {
LFS_data <- current_data
} else {
LFS_data <- data.table::rbindlist(list(LFS_data, current_data), use.names = TRUE, fill = TRUE)
}
}
rm(current_data)
invisible(gc())
}
rm(all_csv_files, all_basenames, matching_indices, csv_files, file_path)
invisible(gc())
}
# Data Cleaning & Variable Creation
# Convert variables to appropriate formats and create binary indicators for analysis
setDT(LFS_data)
#Log Hourly Earnings
LFS_data[, ln_income := log(HRLYEARN)]
# Employment and Labour Force Status
LFS_data[, is_employed := fifelse(LFSSTAT == 1, 1, 0)]
LFS_data[, in_lf := fifelse(LFSSTAT %in% c(1, 2), 1, 0)]
# Sex
LFS_data[, woman := fifelse(SEX == 2 | GENDER == 2, 1L, 0L, na = 0L)]
# Age
LFS_data[, rough_age_dock15 := fcase(
AGE_12 == 1,  2, AGE_12 == 2,  7, AGE_12 == 3,  12, AGE_12 == 4,  17,
AGE_12 == 5,  22, AGE_12 == 6,  27, AGE_12 == 7,  32, AGE_12 == 8,  37,
AGE_12 == 9,  42, AGE_12 == 10, 47, AGE_12 == 11, 52, AGE_12 == 12, 57,
default = NA_real_
)]
# Province indicators
LFS_data[, prov_nl := fifelse(PROV == 10, 1, 0)]
LFS_data[, prov_pe := fifelse(PROV == 11, 1, 0)]
LFS_data[, prov_ns := fifelse(PROV == 12, 1, 0)]
LFS_data[, prov_nb := fifelse(PROV == 13, 1, 0)]
LFS_data[, prov_qc := fifelse(PROV == 24, 1, 0)]
LFS_data[, prov_mb := fifelse(PROV == 46, 1, 0)]
LFS_data[, prov_sk := fifelse(PROV == 47, 1, 0)]
LFS_data[, prov_ab := fifelse(PROV == 48, 1, 0)]
LFS_data[, prov_bc := fifelse(PROV == 59, 1, 0)]
province_dummies <- c("prov_nl", "prov_pe", "prov_ns", "prov_nb", "prov_qc", "prov_mb", "prov_sk", "prov_ab", "prov_bc")
# Union status
LFS_data[, union_member := fifelse(UNION == 1, 1, 0)]
LFS_data[, union_contract := fifelse(UNION %in% c(1, 2), 1, 0)]
# Immigration status
LFS_data[, newer_immigrant := fifelse(IMMIG == 1, 1, 0)]
LFS_data[, older_immigrant := fifelse(IMMIG == 2, 1, 0)]
# Education dummies
LFS_data[, zero_to_eight := fifelse(EDUC == 0, 1, 0)]
LFS_data[, some_hs := fifelse(EDUC == 1, 1, 0)]
LFS_data[, some_ps := fifelse(EDUC == 3, 1, 0)]
LFS_data[, ps_cert := fifelse(EDUC == 4, 1, 0)]
LFS_data[, ba := fifelse(EDUC == 5, 1, 0)]
LFS_data[, above_ba := fifelse(EDUC == 6, 1, 0)]
education_dummies <- c("zero_to_eight", "some_hs", "some_ps", "ps_cert", "ba", "above_ba")
# NAICS industry dummies
LFS_data[, naics_ForestryLogSupport := fifelse(NAICS_21 == 2, 1, 0)]
LFS_data[, naics_FishingHuntTrap := fifelse(NAICS_21 == 3, 1, 0)]
LFS_data[, naics_MiningOilGasExtract := fifelse(NAICS_21 == 4, 1, 0)]
LFS_data[, naics_Utilities := fifelse(NAICS_21 == 5, 1, 0)]
LFS_data[, naics_Construction := fifelse(NAICS_21 == 6, 1, 0)]
LFS_data[, naics_MfgDurable := fifelse(NAICS_21 == 7, 1, 0)]
LFS_data[, naics_MfgNonDurable := fifelse(NAICS_21 == 8, 1, 0)]
LFS_data[, naics_Wholesale := fifelse(NAICS_21 == 9, 1, 0)]
LFS_data[, naics_Retail := fifelse(NAICS_21 == 10, 1, 0)]
LFS_data[, naics_TransportWarehousing := fifelse(NAICS_21 == 11, 1, 0)]
LFS_data[, naics_FinanceInsurance := fifelse(NAICS_21 == 12, 1, 0)]
LFS_data[, naics_RealEstateRentalLeasing := fifelse(NAICS_21 == 13, 1, 0)]
LFS_data[, naics_ProfSciTech := fifelse(NAICS_21 == 14, 1, 0)]
LFS_data[, naics_BusinessBuildingSupport := fifelse(NAICS_21 == 15, 1, 0)]
LFS_data[, naics_Educational := fifelse(NAICS_21 == 16, 1, 0)]
LFS_data[, naics_HealthSocialAssist := fifelse(NAICS_21 == 17, 1, 0)]
LFS_data[, naics_InfoCultRec := fifelse(NAICS_21 == 18, 1, 0)]
LFS_data[, naics_AccomFood := fifelse(NAICS_21 == 19, 1, 0)]
LFS_data[, naics_OtherServices := fifelse(NAICS_21 == 20, 1, 0)]
LFS_data[, naics_PublicAdmin := fifelse(NAICS_21 == 21, 1, 0)]
naics_dummies <- c(
"naics_ForestryLogSupport", "naics_FishingHuntTrap", "naics_MiningOilGasExtract", "naics_Utilities",
"naics_Construction", "naics_MfgDurable", "naics_MfgNonDurable", "naics_Wholesale",
"naics_Retail", "naics_TransportWarehousing", "naics_FinanceInsurance", "naics_RealEstateRentalLeasing",
"naics_ProfSciTech", "naics_BusinessBuildingSupport", "naics_Educational", "naics_HealthSocialAssist",
"naics_InfoCultRec", "naics_AccomFood", "naics_OtherServices", "naics_PublicAdmin"
)
# Time variables
LFS_data[, years_from_start := (SURVYEAR - 2006) + ifelse(SURVMNTH == 6, 0.5, 0)]
yfs_dummy_names <- character(0)
unique_vals <- sort(unique(na.omit(LFS_data$years_from_start)))
if (length(unique_vals) > 0) {
for (val in unique_vals) {
new_col_name <- paste0("yfs_", gsub("[^a-zA-Z0-9_]", "_", as.character(val)))
yfs_dummy_names <- c(yfs_dummy_names, new_col_name)
LFS_data[, (new_col_name) := fifelse(years_from_start == val, 1L, 0L, na = 0L)]
}
}
# Categorical variables for grouping
LFS_data[, province_name := fcase(
PROV == 10, "Newfoundland and Labrador", PROV == 11, "Prince Edward Island",
PROV == 12, "Nova Scotia", PROV == 13, "New Brunswick",
PROV == 24, "Quebec", PROV == 35, "Ontario",
PROV == 46, "Manitoba", PROV == 47, "Saskatchewan",
PROV == 48, "Alberta", PROV == 59, "British Columbia"
)]
LFS_data[, named_sex := fcase(woman == 0, "Male", woman == 1, "Female")]
LFS_data[, age_group := fcase(
AGE_12 == 1, "15_19",
AGE_12 %in% c(2, 3, 4), "20_34",
AGE_12 %in% c(5, 6, 7, 8), "35_54",
AGE_12 %in% c(9, 10, 11, 12), "55+",
default = NA_character_
)]
rm(unique_vals, val, new_col_name)
invisible(gc())
# Store the models for comparison
models <- list()
# Model 1: Basic with gender and year effects only
dummy_formula_part <- paste(yfs_dummy_names, collapse = " + ")
regression_formula <- as.formula(paste("ln_income ~ woman +", dummy_formula_part))
models[[1]] <- lm(regression_formula, data = LFS_data)
rm(regression_formula, dummy_formula_part)
invisible(gc())
# Model 2: Adding province effects
dummy_formula_part1 <- paste(yfs_dummy_names, collapse = " + ")
dummy_formula_part2 <- paste(province_dummies, collapse = " + ")
regression_formula <- as.formula(paste("ln_income ~ woman + ", dummy_formula_part1, " + ", dummy_formula_part2))
models[[2]] <- lm(regression_formula, data = LFS_data)
rm(regression_formula, dummy_formula_part1, dummy_formula_part2)
invisible(gc())
# Model 3: Adding education effects
dummy_formula_part1 <- paste(yfs_dummy_names, collapse = " + ")
dummy_formula_part2 <- paste(province_dummies, collapse = " + ")
dummy_formula_part3 <- paste(education_dummies, collapse = " + ")
regression_formula <- as.formula(paste("ln_income ~ woman + ", dummy_formula_part1, " + ", dummy_formula_part2, " + ", dummy_formula_part3))
models[[3]] <- lm(regression_formula, data = LFS_data)
rm(regression_formula, dummy_formula_part1, dummy_formula_part2, dummy_formula_part3)
invisible(gc())
# Model 4: Adding age polynomial
dummy_formula_part1 <- paste(yfs_dummy_names, collapse = " + ")
dummy_formula_part2 <- paste(province_dummies, collapse = " + ")
dummy_formula_part3 <- paste(education_dummies, collapse = " + ")
regression_formula <- as.formula(paste("ln_income ~ woman + poly(rough_age_dock15, 2, raw=TRUE) + ",
dummy_formula_part1, " + ", dummy_formula_part2, " + ", dummy_formula_part3))
models[[4]] <- lm(regression_formula, data = LFS_data)
rm(regression_formula, dummy_formula_part1, dummy_formula_part2, dummy_formula_part3)
invisible(gc())
# Model 5: Full model with union, immigration, and industry sectors
dummy_formula_part1 <- paste(yfs_dummy_names, collapse = " + ")
dummy_formula_part2 <- paste(province_dummies, collapse = " + ")
dummy_formula_part3 <- paste(education_dummies, collapse = " + ")
dummy_formula_part4 <- paste(naics_dummies, collapse = " + ")
regression_formula <- as.formula(paste("ln_income ~ woman + poly(rough_age_dock15, 2, raw=TRUE) + newer_immigrant + older_immigrant + union_contract + ",
dummy_formula_part1, " + ", dummy_formula_part2, " + ", dummy_formula_part3, " + ", dummy_formula_part4))
models[[5]] <- lm(regression_formula, data = LFS_data)
rm(regression_formula, dummy_formula_part1, dummy_formula_part2, dummy_formula_part3, dummy_formula_part4)
invisible(gc())
# Define model names for the table
model_names <- c("Gender Only", "Add Provinces", "Add Education", "Add Age", "Full Model")
names(models) <- model_names
# Create a custom coefficient map for the table
coef_map <- c(
"(Intercept)" = "Intercept",
"woman" = "Female",
"poly(rough_age_dock15, 2, raw = TRUE)1" = "Age",
"poly(rough_age_dock15, 2, raw = TRUE)2" = "Age²",
"newer_immigrant" = "Recent Immigrant (≤10yrs)",
"older_immigrant" = "Established Immigrant (>10yrs)",
"union_contract" = "Union Coverage",
# Key education variables
"zero_to_eight" = "Education: 0-8 years",
"ba" = "Education: Bachelor's degree",
"above_ba" = "Education: Above bachelor's",
# Selected provinces
"prov_qc" = "Quebec",
"prov_ab" = "Alberta",
"prov_bc" = "British Columbia",
# Selected industry sectors
"naics_MiningOilGasExtract" = "Industry: Mining & Oil Extraction",
"naics_FinanceInsurance" = "Industry: Finance & Insurance",
"naics_HealthSocialAssist" = "Industry: Healthcare & Social Assist."
)
# Generate regression table
modelsummary(models,
title = "Log Wage Regressions with Different Specifications",
stars = TRUE,
coef_map = coef_map,
gof_map = c("nobs", "r.squared", "adj.r.squared"),
notes = "Year fixed effects included in all models. Ontario is the reference province. Full range of dummy variables not shown for ease of viewing",
output = "html")
## Comparison of All Regression Models (Collapsible)
# This chunk generates a collapsible HTML table comparing all regression models
# and displaying all coefficients.
# The code itself is hidden (echo=FALSE).
# results='asis' allows us to print raw HTML tags directly.
# Ensure the models list exists and contains models
if (!exists("models") || length(models) == 0) {
stop("Regression models not found. Please ensure the 'wage-regressions' chunk ran successfully.")
}
# Start the collapsible section using HTML <details> tag
cat('<details>')
# Add a summary line that the user clicks to expand/collapse
cat('<summary>Click to show/hide the full comparison table of all models</summary>')
# Generate the modelsummary comparison table for ALL models.
# Omit coef_map to show all coefficients.
# With output='html' and results='asis', modelsummary prints the
# HTML table code directly into the document at this point.
modelsummary(models, # Pass the list of all models
title = "Comparison of All Log Wage Regression Models (Full Coefficients)",
stars = TRUE,
gof_map = c("nobs", "r.squared", "adj.r.squared"),
notes = "Includes all dummy variables (Year, Province, Education, Industry) where included in the model. Reference categories: Ontario, High School Graduate, Agriculture.",
output = "html")
# End the collapsible section with the closing </details> tag
cat('</details>')
# Clear models to free memory
rm(models, model_names, coef_map)
invisible(gc())
# Function to calculate Gini coefficient for each subset by year
calculate_gini_by_year <- function(data_subset) {
if (is.null(data_subset) || nrow(data_subset) < 10) {
return(data.frame(years_from_start = numeric(0), gini = numeric(0), median_income = numeric(0)))
}
result <- data_subset[!is.na(HRLYEARN), .(
gini = as.numeric(ineq::ineq(HRLYEARN, type="Gini")),
median_income = as.numeric(median(HRLYEARN, na.rm = TRUE)),
count = .N
), by = years_from_start]
result <- result[count >= 30]
return(result[, .(years_from_start, gini, median_income)])
}
# Process gender subsets first
gender_subsets <- split(LFS_data, LFS_data$named_sex)
gender_gini_results <- data.frame(
group = character(),
years_from_start = numeric(),
gini = numeric(),
median_income = numeric(),
stringsAsFactors = FALSE
)
for (gender_name in names(gender_subsets)) {
subset_gini <- calculate_gini_by_year(gender_subsets[[gender_name]])
if (nrow(subset_gini) > 0) {
subset_gini_df <- data.frame(
group = gender_name,
years_from_start = subset_gini$years_from_start,
gini = subset_gini$gini,
median_income = subset_gini$median_income,
stringsAsFactors = FALSE
)
gender_gini_results <- rbind(gender_gini_results, subset_gini_df)
}
}
# Convert to actual years and create gender plot
gender_gini_results$year <- 2006 + gender_gini_results$years_from_start
p <- ggplot(gender_gini_results, aes(x = year, y = gini, color = group)) +
geom_line(linewidth = 1.2) +
# Removed geom_smooth() line here
labs(title = "Income Inequality (Gini) Trends by Gender",
subtitle = "All of Canada",
x = "Year",
y = "Gini Coefficient",
color = "Gender") +
theme_minimal() +
scale_color_brewer(palette = "Set1") +
scale_y_continuous(limits = c(0.2, 0.35))
print(p)
rm(p, gender_subsets, gender_gini_results, subset_gini, subset_gini_df, gender_name)
invisible(gc())
# Process province subsets
province_subsets <- split(LFS_data, LFS_data$province_name)
province_gini_results <- data.frame(
group = character(),
years_from_start = numeric(),
gini = numeric(),
median_income = numeric(),
stringsAsFactors = FALSE
)
for (province_name in names(province_subsets)) {
subset_gini <- calculate_gini_by_year(province_subsets[[province_name]])
if (nrow(subset_gini) > 0) {
subset_gini_df <- data.frame(
group = province_name,
years_from_start = subset_gini$years_from_start,
gini = subset_gini$gini,
median_income = subset_gini$median_income,
stringsAsFactors = FALSE
)
province_gini_results <- rbind(province_gini_results, subset_gini_df)
}
}
# Convert to actual years and create province plot
province_gini_results$year <- 2006 + province_gini_results$years_from_start
p <- ggplot(province_gini_results, aes(x = year, y = gini, color = group)) +
geom_line() +
# Removed geom_smooth() line here
labs(title = "Income Inequality Trends by Province",
x = "Year",
y = "Gini Coefficient",
color = "Province") +
theme_minimal() +
theme(legend.position = "bottom") +
guides(color = guide_legend(nrow = 2)) +
scale_y_continuous(limits = c(0.2, 0.35))
print(p)
rm(p, province_subsets, province_gini_results, subset_gini, subset_gini_df, province_name)
invisible(gc())
# Process immigration status subsets
LFS_data[, immigration_status := fcase(
newer_immigrant == 1, "Recent Immigrant",
older_immigrant == 1, "Established Immigrant",
default = "Canadian-born"
)]
immigration_subsets <- split(LFS_data, LFS_data$immigration_status)
immigration_gini_results <- data.frame(
group = character(),
years_from_start = numeric(),
gini = numeric(),
median_income = numeric(),
stringsAsFactors = FALSE
)
for (immigration_name in names(immigration_subsets)) {
subset_gini <- calculate_gini_by_year(immigration_subsets[[immigration_name]])
if (nrow(subset_gini) > 0) {
subset_gini_df <- data.frame(
group = immigration_name,
years_from_start = subset_gini$years_from_start,
gini = subset_gini$gini,
median_income = subset_gini$median_income,
stringsAsFactors = FALSE
)
immigration_gini_results <- rbind(immigration_gini_results, subset_gini_df)
}
}
# Convert to actual years and create immigration plot
immigration_gini_results$year <- 2006 + immigration_gini_results$years_from_start
p <- ggplot(immigration_gini_results, aes(x = year, y = gini, color = group)) +
geom_line(linewidth = 1.2) +
# Removed geom_smooth() line here
labs(title = "Income Inequality Trends by Immigration Status",
x = "Year",
y = "Gini Coefficient",
color = "Immigration Status") +
theme_minimal() +
scale_color_brewer(palette = "Dark2") +
scale_y_continuous(limits = c(0.2, 0.35))
print(p)
rm(p, immigration_subsets, immigration_gini_results, subset_gini, subset_gini_df, immigration_name)
invisible(gc())
# Process education level subsets
LFS_data[, education_level := fcase(
zero_to_eight == 1, "0-8 years",
some_hs == 1, "Some high school",
EDUC == 2, "High school graduate",
some_ps == 1, "Some post-secondary",
ps_cert == 1, "Post-secondary certificate",
ba == 1, "Bachelor's degree",
above_ba == 1, "Above bachelor's",
default = NA_character_
)]
education_subsets <- split(LFS_data, LFS_data$education_level)
education_gini_results <- data.frame(
group = character(),
years_from_start = numeric(),
gini = numeric(),
median_income = numeric(),
stringsAsFactors = FALSE
)
for (education_name in names(education_subsets)) {
if (is.na(education_name)) next
subset_gini <- calculate_gini_by_year(education_subsets[[education_name]])
if (nrow(subset_gini) > 0) {
subset_gini_df <- data.frame(
group = education_name,
years_from_start = subset_gini$years_from_start,
gini = subset_gini$gini,
median_income = subset_gini$median_income,
stringsAsFactors = FALSE
)
education_gini_results <- rbind(education_gini_results, subset_gini_df)
}
}
# Convert to actual years and create education plot
education_gini_results$year <- 2006 + education_gini_results$years_from_start
filtered_education_gini <- education_gini_results[!is.na(education_gini_results$group), ]
p <- ggplot(filtered_education_gini, aes(x = year, y = gini, color = group)) +
geom_line() +
# Removed geom_smooth() line here
labs(title = "Income Inequality Trends by Education Level",
x = "Year",
y = "Gini Coefficient",
color = "Education Level") +
theme_minimal() +
theme(legend.position = "right") +
scale_y_continuous(limits = c(0.15, 0.4))
print(p)
rm(p, education_subsets, education_gini_results, filtered_education_gini, subset_gini, subset_gini_df, education_name)
invisible(gc())
# Process gender-education intersectional analysis
LFS_data[, gender_education := paste(named_sex, education_level, sep = " - ")]
gender_education_subsets <- split(LFS_data, LFS_data$gender_education)
gender_education_gini_results <- data.frame(
group = character(),
years_from_start = numeric(),
gini = numeric(),
median_income = numeric(),
stringsAsFactors = FALSE
)
for (gender_education_name in names(gender_education_subsets)) {
if (grepl("NA", gender_education_name)) next
subset_gini <- calculate_gini_by_year(gender_education_subsets[[gender_education_name]])
if (nrow(subset_gini) > 0) {
subset_gini_df <- data.frame(
group = gender_education_name,
years_from_start = subset_gini$years_from_start,
gini = subset_gini$gini,
median_income = subset_gini$median_income,
stringsAsFactors = FALSE
)
gender_education_gini_results <- rbind(gender_education_gini_results, subset_gini_df)
}
# Periodic memory cleanup
if (nrow(gender_education_gini_results) %% 10 == 0) {
invisible(gc())
}
}
# Convert to actual years and create intersectional plots
gender_education_gini_results$year <- 2006 + gender_education_gini_results$years_from_start
# Filter to key education levels for readability
key_education_levels <- c(
"Male - High school graduate",
"Female - High school graduate",
"Male - Bachelor's degree",
"Female - Bachelor's degree",
"Male - Above bachelor's",
"Female - Above bachelor's"
)
filtered_gender_education <- gender_education_gini_results[
gender_education_gini_results$group %in% key_education_levels,
]
# Create Gini coefficient plot
p <- ggplot(filtered_gender_education, aes(x = year, y = gini, color = group)) +
geom_line() +
# Removed geom_smooth() line here
labs(title = "Income Inequality by Gender and Education Level",
x = "Year",
y = "Gini Coefficient",
color = "Group") +
theme_minimal() +
theme(legend.position = "right") +
scale_y_continuous(limits = c(0.15, 0.4))
print(p)
rm(p)
# Create median income plot
filtered_gender_education$median_income <- filtered_gender_education$median_income / 100
p <- ggplot(filtered_gender_education, aes(x = year, y = median_income, color = group)) +
geom_line(linewidth = 1.2) +
# Removed geom_smooth() line here
labs(title = "Median Hourly Income by Gender and Education Level",
x = "Year",
y = "Median Hourly Income ($)",
color = "Group") +
theme_minimal() +
theme(legend.position = "right") +
scale_y_continuous(labels = scales::dollar)
print(p)
# Clean up all remaining objects
rm(p, gender_education_subsets, gender_education_gini_results, filtered_gender_education,
key_education_levels, subset_gini, subset_gini_df, gender_education_name, calculate_gini_by_year)
if(exists("LFS_data")) {
rm(LFS_data)
}
invisible(invisible(gc()))
